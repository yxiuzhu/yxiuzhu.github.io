import{_ as e,c as o,o as t,N as n}from"./chunks/framework.0799945b.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/personal-intro/note/note.md","lastUpdated":1691937614000}'),a={name:"markdown/personal-intro/note/note.md"},p=n('<p>我是 note 专区</p><h2 id="pnpm的接入" tabindex="-1">pnpm的接入 <a class="header-anchor" href="#pnpm的接入" aria-label="Permalink to &quot;pnpm的接入&quot;">​</a></h2><h3 id="使用pnpm安装依赖后node-modules包的结构" tabindex="-1">使用pnpm安装依赖后node_modules包的结构 <a class="header-anchor" href="#使用pnpm安装依赖后node-modules包的结构" aria-label="Permalink to &quot;使用pnpm安装依赖后node_modules包的结构&quot;">​</a></h3><ul><li>.pnmp为虚拟存储目录，该目录通过<code>&lt;package-name&gt;@&lt;version&gt;</code>来实现相同模块不同版本之间隔离和复用，由于它只会根据项目中的依赖生成，并不存在提升，所以它不会存在之前提到的Phantom dependencies问题！通过Store + Links来实现</li></ul><h4 id="store" tabindex="-1">Store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;Store&quot;">​</a></h4><p>pnpm 使用名为 .pnpm-store的 store dir，Mac/linux中默认会设置到{home dir}&gt;/.pnpm-store/v3；windows下会设置到当前盘的根目录下，比如C（C/.pnpm-store/v3）、D盘（D/.pnpm-store/v3）。</p><p>可以在不同的磁盘上设置同一个存储，但在这种情况下，pnpm 将复制包而不是硬链接它们，因为硬链接只能发生在同一文件系统同一分区上</p><p>如果某个依赖在 sotre 目录中存在了话，那么就会直接从 store 目录里面去 hard-link，避免了二次安装带来的时间消耗，如果依赖在 store 目录里面不存在的话，就会去下载一次。</p><h2 id="pnpm踩坑记录" tabindex="-1">pnpm踩坑记录 <a class="header-anchor" href="#pnpm踩坑记录" aria-label="Permalink to &quot;pnpm踩坑记录&quot;">​</a></h2><ul><li>安装依赖的过程中，若幽灵依赖会提示缺少某依赖包，需要额外安装依赖包，会在.pnpm中新增包</li></ul><p>todoLIst：</p><ul><li>学一下更好的编辑md <ul><li>拆入图片</li><li>链接</li><li>md可视化编辑</li></ul></li><li>创建一个富文本编辑器，能够将md文档实时转换为最终展示的文档，减少md编写的成本</li></ul>',12),r=[p];function l(i,s,d,m,c,_){return t(),o("div",null,r)}const f=e(a,[["render",l]]);export{u as __pageData,f as default};
